// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  username  String     @unique
  email     String     @unique
  password  String
  role      String
  avatarId  String     @unique
  status    String?    @default("active")
  createAt  DateTime?  @default(now())
  likes     Like[]
  posts     Post[]
  tokens    Token[]
  favorites Favorite[]
  friends   Friend[]
  comments  Comment[]
  image     Image?     @relation(fields: [avatarId], references: [id])
}

model Post {
  id        String     @id @default(uuid())
  userId    String
  content   String
  status    String?    @default("active")
  createAt  DateTime?  @default(now())
  likes     Like[]
  author    User?      @relation(fields: [userId], references: [id])
  favorites Favorite[]
  images    Image[]
  comments  Comment[]
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
}

model Favorite {
  id     String @id @default(uuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
}

model Token {
  id             String   @id @default(uuid())
  userId         String
  accessToken    String   @unique
  refreshToken   String   @unique
  accessExpires  DateTime
  refreshExpires DateTime
  user           User     @relation(fields: [userId], references: [id])
}

model Friend {
  id      String @id @default(uuid())
  ownerId String
  refId   String
  user    User[]
}

model Image {
  id     String  @id @default(uuid())
  postId String?
  url    String
  user   User?
  post   Post?   @relation(fields: [postId], references: [id])
}

model Comment {
  id          String    @id @default(uuid())
  userId      String
  postId      String
  content     String
  status      Boolean   @default(false)
  createdDate DateTime? @default(now())
  user        User      @relation(fields: [userId], references: [id])
  post        Post      @relation(fields: [postId], references: [id])
}
